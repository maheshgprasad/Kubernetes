{"version":3,"sources":["favicon.svg","OtherPage.js","Fib.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","OtherPage","react_default","a","createElement","react_router_dom","to","Fib","state","seenIndexes","values","index","handleSubmit","_callee","event","regenerator_default","wrap","_context","prev","next","preventDefault","axios","post","_this","setState","stop","this","fetchValues","fetchIndexes","get","data","map","_ref2","number","join","entries","key","push","_this2","onSubmit","value","onChange","target","renderSeenIndexes","renderValues","Component","App","className","src","favicon","alt","react_router","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","src_App_0","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.6cd50022.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/favicon.1e47d806.svg\";","import React from 'react';\nimport { Link } from 'react-router-dom';\nexport default () => {\n  return (\n    <div>\n      <p>I have a database on <strong>Postgres</strong> which stores all the indices and its corresponding values that i have calculated.</p>\n      <br/>\n      <p>Also I have a <strong>Redis Server</strong> which stores all the indices to which i have calculated the values for.</p>\n      <br />\n      <Link to=\"/\">FiboKube Home</Link>\n    </div>\n  );\n};\n","import React, { Component } from 'react';\nimport axios from 'axios';\nclass Fib extends Component {\n  state = {\n    seenIndexes: [],\n    values: {},\n    index: ''\n  };\n\n  componentDidMount() {\n    this.fetchValues();\n    this.fetchIndexes();\n  }\n\n  async fetchValues() {\n    const values = await axios.get('/api/values/current');\n    this.setState({ values: values.data });\n  }\n\n  async fetchIndexes() {\n    const seenIndexes = await axios.get('/api/values/all');\n    this.setState({\n      seenIndexes: seenIndexes.data\n    });\n  }\n\n  handleSubmit = async event => {\n    event.preventDefault();\n\n    await axios.post('/api/values', {\n      index: this.state.index\n    });\n    this.setState({ index: '' });\n  };\n\n  renderSeenIndexes() {\n    return this.state.seenIndexes.map(({ number }) => number).join(', ');\n  }\n\n  renderValues() {\n    const entries = [];\n\n    for (let key in this.state.values) {\n      entries.push(\n        <div key={key}>\n          For index {key} I calculated {this.state.values[key]}\n        </div>\n      );\n    }\n\n    return entries;\n  }\n\n  render() {\n    return (\n      <div>\n        <form onSubmit={this.handleSubmit}>\n          <label>Enter your index:</label>\n          <input\n            value={this.state.index}\n            onChange={event => this.setState({ index: event.target.value })}\n          />\n          <button>Submit</button>\n        </form>\n\n        <h3>Indexes I have seen:</h3>\n        {this.renderSeenIndexes()}\n\n        <h3>Calculated Values:</h3>\n        {this.renderValues()}\n      </div>\n    );\n  }\n}\n\nexport default Fib;\n","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport favicon from './favicon.svg';\nimport './App.css';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\nimport OtherPage from './OtherPage';\nimport Fib from './Fib';\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={favicon} className=\"App-logo\" alt=\"logo\" />\n            <h1 className=\"App-title\">Fibonaaci Calculator on Kubernetes</h1>\n            <Link to=\"/\">Home</Link><br/>\n            <Link to=\"/otherpage\">Description</Link>\n          </header>\n          <br />\n          <div>\n            <Route exact path=\"/\" component={Fib} />\n            <Route path=\"/otherpage\" component={OtherPage} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}